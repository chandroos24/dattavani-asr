name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg python3-pip
        pip3 install psutil requests toml

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg
        pip3 install psutil requests toml

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg
        pip install psutil requests toml

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build debug
      run: cargo build --verbose

    - name: Run unit tests
      run: cargo test --verbose

    - name: Build release
      run: cargo build --release --verbose

    - name: Run QA Agent
      run: |
        chmod +x qa-agent/run_qa.sh
        python3 qa-agent/qa_agent.py --project-root . --format json --output qa-report-${{ matrix.os }}-${{ matrix.rust }}.json
      continue-on-error: false

    - name: Upload QA Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: qa-report-${{ matrix.os }}-${{ matrix.rust }}
        path: qa-report-${{ matrix.os }}-${{ matrix.rust }}.json

    - name: Generate QA Dashboard
      if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
      run: |
        python3 qa-agent/qa_dashboard.py --export json --output qa-dashboard.json
        python3 qa-agent/qa_dashboard.py > qa-dashboard.txt

    - name: Upload QA Dashboard
      uses: actions/upload-artifact@v3
      if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
      with:
        name: qa-dashboard
        path: |
          qa-dashboard.json
          qa-dashboard.txt

  qa-analysis:
    name: QA Analysis & Reporting
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install QA dependencies
      run: |
        pip install psutil requests toml jinja2

    - name: Download all QA reports
      uses: actions/download-artifact@v3
      with:
        path: qa-reports/

    - name: Aggregate QA Results
      run: |
        python3 qa-agent/scripts/aggregate_qa_results.py qa-reports/ > qa-summary.md

    - name: Generate QA Badge
      run: |
        python3 qa-agent/scripts/generate_qa_badge.py qa-reports/ > qa-badge.svg

    - name: Comment QA Results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const qaSummary = fs.readFileSync('qa-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ¤– QA Agent Report\n\n${qaSummary}`
          });

    - name: Upload QA Summary
      uses: actions/upload-artifact@v3
      with:
        name: qa-summary
        path: |
          qa-summary.md
          qa-badge.svg

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run QA Security Check
      run: |
        python3 qa-agent/scripts/security_check.py > security-report.json

    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg python3-pip
        pip3 install psutil requests toml

    - name: Build release binary
      run: cargo build --release

    - name: Run Performance Benchmarks
      run: |
        python3 qa-agent/scripts/performance_benchmark.py > performance-report.json

    - name: Upload Performance Report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.json

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: [test, qa-analysis]
    if: github.event_name == 'release'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dattavani-asr
            asset_name: dattavani-asr-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dattavani-asr.exe
            asset_name: dattavani-asr-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dattavani-asr
            asset_name: dattavani-asr-macos-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Final QA Validation
      run: |
        python3 qa-agent/qa_agent.py --project-root . --categories build cli performance
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg pkg-config openssl

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg pkg-config libssl-dev

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: cobertura.xml
        fail_ci_if_error: true

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: [test, security]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dattavani-asr
            asset_name: dattavani-asr-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dattavani-asr
            asset_name: dattavani-asr-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dattavani-asr
            asset_name: dattavani-asr-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dattavani-asr.exe
            asset_name: dattavani-asr-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg pkg-config libssl-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg pkg-config openssl

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: dattavani/asr-rust
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release archives
      run: |
        for dir in */; do
          if [ -d "$dir" ]; then
            cd "$dir"
            if [[ "$dir" == *"windows"* ]]; then
              zip -r "../${dir%/}.zip" .
            else
              tar -czf "../${dir%/}.tar.gz" .
            fi
            cd ..
          fi
        done

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.tar.gz
          *.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg pkg-config libssl-dev

    - name: Run benchmarks
      run: cargo bench

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
